#ifndef SMFS_H
#define SMFS_H

#include <stdint.h>
#include "smfsconfig.h"

#define FILES_INFO_START_BLOCK			1
#define CLUSTER							4
#define FILES_START_BLOCK				MAX_NUMBER_OF_FILES + 1
#define FILE_START_CLUSTER				FILES_START_BLOCK
#define FILENAME_MAX_LENGTH				498

#define NEXT_FREE_CLUSTER_INDEX			0
#define NEXT_FREE_INFO_BLOCK_INDEX		4
#define NEXT_OVERWRITABLE_CLUSTER_INDEX	8
#define LAST_OVERWRITABLE_CLUSTER_INDEX	12
#define TOTAL_FILES_INDEX				16
#define DELETED_FILES_INDEX				20
#define NEXT_DELETED_BLOCK_INDEX		24
#define LAST_DELETED_BLOCK_INDEX		28
#define TOTAL_SPACE_USED_INDEX			32
#define ACTUAL_SPACE_USED_INDEX			36
#define FILESYSTEM_STATUS_INDEX			508

#define DELETED_INFO_BLOCK_INDEX		499
#define FILE_SIZE_INDEX					503
#define FILE_STATUS_INDEX				507
#define FILE_START_CLUSTER_INDEX		508

#define NEXT_CLUSTER_LINK_INDEX			508

#define FILE_STATUS_NEW_FILE 			0b00000000
#define FILE_STATUS_PREVOUSLY_WRITTEN	0b00000001
#define FILE_STATUS_DELETED				0b00000010
#define FILE_STATUS_READONLY			0b00000100
#define FILE_STATUS_MAX_SIZE			0b10000000

#define SYSTEM_SPACE_USED				((MAX_NUMBER_OF_FILES + 1) * BLOCK_SIZE)
#define MAX_DATA_SPACE					(DISK_MEMORY - SYSTEM_SPACE_USED)
#define MAX_CLUSTERS					(MAX_BLOCKS / CLUSTER)

typedef enum
{
	FS_NO_FILESYSTEM,
	FS_OK,
	FS_MAX_FILES_REACHED
}SMFS_STATUS;

typedef enum
{
	FREE_BLOCK,
	DELETED_FILE_BLOCK
}BLOCK_TYPE;

typedef enum
{
	FREE_CLUSTER,
	OVERWRITABLE_CLUSTER
}CLUSTER_TYPE;

typedef enum
{
	FILE_CREATE_FAILURE,
	FILE_CREATE_SUCCESS
}SMFS_FCREATE_RESULT;

typedef enum
{
	FILE_OPEN_MODE_READ,
	FILE_OPEN_MODE_WRITE,
	FILE_OPEN_MODE_APPEND
}SMFS_FOPEN_MODE;

typedef enum
{
	FILE_NOT_FOUND,
	FILE_OPEN_SUCCESS
}SMFS_FOPEN_RESULT;

typedef enum
{
	FILE_WRITE_FAILURE_MEMORY_FULL,
	FILE_WRITE_FAILURE_NOT_ENOUGH_MEMORY,
	FILE_WRITE_FAILURE_MAX_FILES_REACHED,
	FILE_WRITE_FAILURE_DATA_TOO_LARGE,
	FILE_WRITE_FAILURE_FILE_MODE_READONLY,
	FILE_WRITE_SUCCESS
}SMFS_FWRITE_RESULT;

typedef enum
{
	FILE_APPEND_FAILURE_MEMORY_FULL,
	FILE_APPEND_FAILURE_NOT_ENOUGH_MEMORY,
	FILE_APPEND_FAILURE_DATA_TOO_LARGE,
	FILE_APPEND_FAILURE_FILE_MODE_READONLY,
	FILE_APPEND_SUCCESS
}SMFS_FAPPEND_RESULT;

typedef enum
{
	FILE_DELETE_FAILURE,
	FILE_DELETE_SUCCESS
}SMFS_FDELETE_RESULT;

typedef struct
{
	uint32_t start_cluster;
	uint32_t info_block;
	uint8_t  status;
	uint32_t size;
	uint32_t size_on_disk;

	SMFS_FOPEN_MODE open_mode;

	char name[FILENAME_MAX_LENGTH];
}SMFS_FILE;

void smfs_format_disk(void);
SMFS_STATUS smfs_init(void);
uint64_t smfs_getTotalStorageUsed(void);
uint64_t smfs_getDataStorageUsed(void);
SMFS_FCREATE_RESULT smfs_create(SMFS_FILE* _file, const char* _name);
uint32_t smfs_getFileSize(SMFS_FILE* _file);
SMFS_FOPEN_RESULT smfs_open(SMFS_FILE* _file, const char* _name, SMFS_FOPEN_MODE _open_mode);
SMFS_FWRITE_RESULT smfs_write(SMFS_FILE* _file, const char* _data);
SMFS_FAPPEND_RESULT smfs_append(SMFS_FILE* _file, const char* _data);
void smfs_read(SMFS_FILE* _file, uint8_t* _buffer);
SMFS_FDELETE_RESULT smfs_delete(SMFS_FILE* _file);

#endif